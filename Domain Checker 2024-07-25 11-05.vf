{
  "version": {
    "_version": 9.03,
    "autoSaveFromRestore": false,
    "canvasTemplates": [],
    "components": [],
    "creatorID": 3600,
    "manualSave": false,
    "name": "Initial Version",
    "platformData": {
      "slots": [],
      "intents": [
        {
          "key": "6579c6bf984565862f64b783",
          "name": "Yes",
          "slots": [],
          "inputs": [
            {
              "text": "sure",
              "slots": []
            },
            {
              "text": "certainly",
              "slots": []
            },
            {
              "text": "affirmative",
              "slots": []
            },
            {
              "text": "okay",
              "slots": []
            },
            {
              "text": "ok",
              "slots": []
            },
            {
              "text": "ya",
              "slots": []
            },
            {
              "text": "yep",
              "slots": []
            },
            {
              "text": "yup",
              "slots": []
            },
            {
              "text": "yea",
              "slots": []
            },
            {
              "text": "yes",
              "slots": []
            }
          ],
          "noteID": "nv3ms00my3",
          "description": "Trigger this intent when the user responds affirmatively or agrees to a question or statement using words like \"yes\", \"yea\", \"yup\", \"yep\", \"ya\", \"ok\", \"okay\", \"affirmative\", \"certainly\", or \"sure\"."
        },
        {
          "key": "6579c778dd3cca0fe0e0b152",
          "name": "No",
          "slots": [],
          "inputs": [
            {
              "text": "negative",
              "slots": []
            },
            {
              "text": "nevermind",
              "slots": []
            },
            {
              "text": "not",
              "slots": []
            },
            {
              "text": "no thanks",
              "slots": []
            },
            {
              "text": "no way",
              "slots": []
            },
            {
              "text": "not now",
              "slots": []
            },
            {
              "text": "nah",
              "slots": []
            },
            {
              "text": "nay",
              "slots": []
            },
            {
              "text": "nope",
              "slots": []
            },
            {
              "text": "no",
              "slots": []
            }
          ],
          "noteID": "nw3ms10mil",
          "description": "Trigger this intent when the user responds negatively or declines something, using words like \"no\", \"nope\", \"nay\", \"nah\", \"not now\", \"no way\", \"no thanks\", \"not\", \"nevermind\", or \"negative\"."
        },
        {
          "key": "None",
          "name": "None",
          "slots": [],
          "inputs": [],
          "noteID": null
        }
      ],
      "settings": {
        "restart": true,
        "repeat": 100,
        "locales": [
          "en-US"
        ],
        "defaultVoice": "Alexa"
      },
      "publishing": {
        "avatar": "https://cdn.voiceflow.com/assets/logomark.png",
        "color": "#2E7FF1",
        "description": "Our virtual agent is here to help you.",
        "feedback": false,
        "image": "https://cdn.voiceflow.com/assets/logomark.png",
        "persistence": "localStorage",
        "position": "right",
        "spacing": {
          "side": 24,
          "bottom": 24
        },
        "title": "Starting Template - Webchat",
        "watermark": true
      },
      "platform": "webchat"
    },
    "prototype": {
      "type": "chat",
      "data": {
        "name": "Domain Checker",
        "locales": [
          "en-US"
        ]
      },
      "model": {
        "intents": [],
        "slots": []
      },
      "context": {
        "stack": [
          {
            "programID": "64386e21bb106b044ea34b78",
            "storage": {},
            "variables": {},
            "diagramID": "64386e21bb106b044ea34b78"
          }
        ],
        "variables": {}
      },
      "surveyorContext": {
        "functionDefinitions": {},
        "referencedResponseIDs": [],
        "slotsMap": {},
        "platform": "webchat",
        "products": {},
        "extraSlots": [],
        "interfaces": [],
        "permissions": [],
        "extraIntents": [],
        "usedEventsSet": [],
        "usedIntentsSet": [],
        "goToIntentsSet": [],
        "cmsVariables": {
          "sessions": {
            "isSystem": true,
            "defaultValue": null
          },
          "user_id": {
            "isSystem": true,
            "defaultValue": null
          },
          "timestamp": {
            "isSystem": true,
            "defaultValue": null
          },
          "platform": {
            "isSystem": true,
            "defaultValue": null
          },
          "intent_confidence": {
            "isSystem": true,
            "defaultValue": null
          },
          "last_response": {
            "isSystem": true,
            "defaultValue": null
          },
          "last_event": {
            "isSystem": true,
            "defaultValue": null
          },
          "last_utterance": {
            "isSystem": true,
            "defaultValue": null
          },
          "vf_memory": {
            "isSystem": true,
            "defaultValue": null
          },
          "debug": {
            "isSystem": false,
            "defaultValue": null,
            "datatype": "any",
            "isArray": false
          },
          "result": {
            "isSystem": false,
            "defaultValue": null,
            "datatype": "any",
            "isArray": false
          }
        }
      },
      "settings": {},
      "platform": "webchat"
    },
    "topics": [
      {
        "type": "DIAGRAM",
        "sourceID": "64386e21bb106b044ea34b78"
      }
    ],
    "variables": [
      "sessions",
      "user_id",
      "timestamp",
      "platform",
      "intent_confidence",
      "last_response",
      "last_event",
      "last_utterance",
      "vf_memory",
      "debug",
      "result"
    ],
    "programResources": {
      "messages": {}
    },
    "_id": "66a0e19b4422a15a3960409d",
    "updatedAt": "2024-07-24T11:54:15.260Z",
    "domains": [
      {
        "id": "cla06iyr900b206pkh8d4ap8n",
        "name": "Home",
        "live": true,
        "topicIDs": [
          "64386e21bb106b044ea34b78"
        ],
        "rootDiagramID": "64386e21bb106b044ea34b78",
        "updatedBy": 3600,
        "updatedAt": "2024-07-24T11:12:27.180Z"
      }
    ],
    "projectID": "66a0e19b4422a15a3960409c",
    "rootDiagramID": "64386e21bb106b044ea34b78",
    "templateDiagramID": "643872531e80120007759e05"
  },
  "diagrams": {
    "643872531e80120007759e05": {
      "name": "Template Diagram",
      "type": "TEMPLATE",
      "zoom": 100,
      "nodes": {},
      "offsetX": 0,
      "offsetY": 0,
      "modified": 1681420883,
      "creatorID": 3600,
      "variables": [],
      "menuItems": [],
      "_id": "66a0e19b4422a15a3960409e",
      "diagramID": "643872531e80120007759e05",
      "versionID": "66a0e19b4422a15a3960409d"
    },
    "64386e21bb106b044ea34b78": {
      "name": "ROOT",
      "type": "TOPIC",
      "zoom": 100,
      "nodes": {
        "start00000000000000000000": {
          "type": "start",
          "data": {
            "name": "Start",
            "color": "#56b365",
            "steps": [],
            "portsV2": {
              "byKey": {},
              "builtIn": {
                "next": {
                  "type": "next",
                  "target": "66a0e1aee64b167670872e7f",
                  "id": "6032afcf359e8c14c06c0319",
                  "data": {
                    "points": [
                      {
                        "point": [
                          -60.84,
                          -704.69
                        ]
                      },
                      {
                        "point": [
                          18.15,
                          -704.53
                        ]
                      }
                    ]
                  }
                }
              },
              "dynamic": []
            },
            "label": "Start"
          },
          "nodeID": "start00000000000000000000",
          "coords": [
            -125.47306657576806,
            -726.6861503347151
          ]
        },
        "66a0e1aee64b167670872e7d": {
          "type": "text",
          "data": {
            "name": "Text",
            "texts": [
              {
                "id": "712oi3ef0",
                "content": [
                  {
                    "children": [
                      {
                        "text": "Welcome!"
                      }
                    ]
                  }
                ]
              }
            ],
            "canvasVisibility": "preview",
            "portsV2": {
              "byKey": {},
              "builtIn": {
                "next": {
                  "type": "next",
                  "target": null,
                  "id": "66a0e1aee64b167670872e7e"
                }
              },
              "dynamic": []
            }
          },
          "nodeID": "66a0e1aee64b167670872e7d"
        },
        "66a0e1aee64b167670872e7f": {
          "type": "block",
          "data": {
            "name": "Check Authorization",
            "steps": [
              "66a0e1b8e64b167670872e86"
            ],
            "color": "#5b9fd7"
          },
          "nodeID": "66a0e1aee64b167670872e7f",
          "coords": [
            183.15120983619772,
            -731.5259578307563
          ]
        },
        "66a0e1b8e64b167670872e86": {
          "type": "code",
          "data": {
            "name": "",
            "code": "// Ignore the check when testing in Voiceflow\nif(user_id === 'TEST_USER') {\n  return true\n}\n\n// Getting the token from Chat Widget launch event\nlet token = last_event.payload.validationToken\n\n// Same as in Cloudflare Worker\nconst SECRET_KEY = 'your-secret-key-here';\n\n// Array of allowed domains\nconst allowedDomains = ['voiceflow-gallagan.github.io','dash.cloudflare.com', 'google.com'];\n\n// Array of allowed domain patterns\nconst allowedDomainPatterns = [/^.*\\.voiceflow\\.com$/];\n    \n\n// Base64 encoding and decoding functions\nconst Base64 = {\n  _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n  encode: function(e) {\n    var t = \"\";\n    var n, r, i, s, o, u, a;\n    var f = 0;\n    e = Base64._utf8_encode(e);\n    while (f < e.length) {\n      n = e.charCodeAt(f++);\n      r = e.charCodeAt(f++);\n      i = e.charCodeAt(f++);\n      s = n >> 2;\n      o = (n & 3) << 4 | r >> 4;\n      u = (r & 15) << 2 | i >> 6;\n      a = i & 63;\n      if (isNaN(r)) {\n        u = a = 64\n      } else if (isNaN(i)) {\n        a = 64\n      }\n      t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)\n    }\n    return t\n  },\n  decode: function(e) {\n    var t = \"\";\n    var n, r, i;\n    var s, o, u, a;\n    var f = 0;\n    e = e.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n    while (f < e.length) {\n      s = this._keyStr.indexOf(e.charAt(f++));\n      o = this._keyStr.indexOf(e.charAt(f++));\n      u = this._keyStr.indexOf(e.charAt(f++));\n      a = this._keyStr.indexOf(e.charAt(f++));\n      n = s << 2 | o >> 4;\n      r = (o & 15) << 4 | u >> 2;\n      i = (u & 3) << 6 | a;\n      t = t + String.fromCharCode(n);\n      if (u != 64) {\n        t = t + String.fromCharCode(r)\n      }\n      if (a != 64) {\n        t = t + String.fromCharCode(i)\n      }\n    }\n    t = Base64._utf8_decode(t);\n    return t\n  },\n  _utf8_encode: function(e) {\n    e = e.replace(/\\r\\n/g, \"\\n\");\n    var t = \"\";\n    for (var n = 0; n < e.length; n++) {\n      var r = e.charCodeAt(n);\n      if (r < 128) {\n        t += String.fromCharCode(r)\n      } else if (r > 127 && r < 2048) {\n        t += String.fromCharCode(r >> 6 | 192);\n        t += String.fromCharCode(r & 63 | 128)\n      } else {\n        t += String.fromCharCode(r >> 12 | 224);\n        t += String.fromCharCode(r >> 6 & 63 | 128);\n        t += String.fromCharCode(r & 63 | 128)\n      }\n    }\n    return t\n  },\n  _utf8_decode: function(e) {\n    var t = \"\";\n    var n = 0;\n    var r = c1 = c2 = 0;\n    while (n < e.length) {\n      r = e.charCodeAt(n);\n      if (r < 128) {\n        t += String.fromCharCode(r);\n        n++\n      } else if (r > 191 && r < 224) {\n        c2 = e.charCodeAt(n + 1);\n        t += String.fromCharCode((r & 31) << 6 | c2 & 63);\n        n += 2\n      } else {\n        c2 = e.charCodeAt(n + 1);\n        c3 = e.charCodeAt(n + 2);\n        t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n        n += 3\n      }\n    }\n    return t\n  }\n}\n\n\nfunction validateToken(token) {\n  try {\n    const [payloadBase64, signatureBase64] = token.split('.');\n    const payload = JSON.parse(Base64.decode(payloadBase64));\n    debug = JSON.stringify(payload)\n    \n    // Check expiration\n    if (payload.exp < Date.now()) {\n      return 'Expired';\n    }\n    \n    function isAllowedDomain(hostname) {\n      // Check exact matches\n      if (allowedDomains.includes(hostname)) {\n        return true;\n      }\n      // Check pattern matches\n      return allowedDomainPatterns.some(pattern => pattern.test(hostname));\n    }\n    \n    // Check hostname\n    if (!isAllowedDomain(payload.hostname)) {\n      return 'Not allowed'\n    }\n    \n    // Verify signature\n    const verifySignature = async () => {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(JSON.stringify(payload) + SECRET_KEY);\n      const hash = await crypto.subtle.digest('SHA-256', data);\n      const calculatedSignature = btoa(String.fromCharCode.apply(null, new Uint8Array(hash)));\n      if(!calculatedSignature === signatureBase64) {\n        return 'Error'\n      }\n    };\n    return verifySignature();\n  } catch (error) {\n    console.error('Token validation error:', error);\n    return 'Error';\n  }\n}\n\nreturn validateToken(token)\n",
            "paths": [
              {
                "label": "Error",
                "key": "i54ka3e4n"
              },
              {
                "label": "Expired",
                "key": "2r4ve3e45"
              },
              {
                "label": "Not allowed",
                "key": "9e5ft3e2s"
              }
            ],
            "portsV2": {
              "byKey": {
                "i54ka3e4n": {
                  "id": "66a0e691e64b167670872ea5",
                  "target": "66a0e8ede64b167670872f05",
                  "type": "",
                  "data": {
                    "points": [
                      {
                        "point": [
                          17.15,
                          -543.28
                        ],
                        "reversed": true
                      },
                      {
                        "point": [
                          -6.85,
                          -543.28
                        ]
                      },
                      {
                        "point": [
                          -6.85,
                          -316.53
                        ]
                      },
                      {
                        "point": [
                          180.78,
                          -316.53
                        ]
                      },
                      {
                        "point": [
                          180.78,
                          -289.19
                        ],
                        "toTop": true,
                        "allowedToTop": true
                      }
                    ]
                  }
                },
                "2r4ve3e45": {
                  "id": "66a0e6dbe64b167670872ebe",
                  "target": "66a0e6e3e64b167670872ec6",
                  "type": "",
                  "data": {
                    "points": [
                      {
                        "point": [
                          349.15,
                          -488.78
                        ]
                      },
                      {
                        "point": [
                          448.15,
                          -488.28
                        ]
                      }
                    ]
                  }
                },
                "9e5ft3e2s": {
                  "id": "66a0e79de64b167670872ed4",
                  "target": "66a0e7a3e64b167670872ed8",
                  "type": "",
                  "data": {
                    "points": [
                      {
                        "point": [
                          349.15,
                          -434.28
                        ]
                      },
                      {
                        "point": [
                          399.28,
                          -434.28
                        ]
                      },
                      {
                        "point": [
                          399.28,
                          -348.28
                        ]
                      },
                      {
                        "point": [
                          449.4,
                          -348.28
                        ],
                        "allowedToTop": true
                      }
                    ]
                  }
                }
              },
              "builtIn": {
                "next": {
                  "type": "next",
                  "target": "66a0e697e64b167670872ea7",
                  "id": "66a0e1b8e64b167670872e87",
                  "data": {
                    "points": [
                      {
                        "point": [
                          349.15,
                          -597.78
                        ]
                      },
                      {
                        "point": [
                          399.9,
                          -597.78
                        ]
                      },
                      {
                        "point": [
                          399.9,
                          -705.78
                        ]
                      },
                      {
                        "point": [
                          450.65,
                          -705.78
                        ],
                        "allowedToTop": true
                      }
                    ]
                  }
                },
                "fail": {
                  "type": "fail",
                  "target": "66a0e8ede64b167670872f05",
                  "id": "66a0e1b8e64b167670872e88",
                  "data": {
                    "points": [
                      {
                        "point": [
                          17.15,
                          -379.78
                        ],
                        "reversed": true
                      },
                      {
                        "point": [
                          -6.85,
                          -379.78
                        ]
                      },
                      {
                        "point": [
                          -6.85,
                          -316.53
                        ]
                      },
                      {
                        "point": [
                          180.78,
                          -316.53
                        ]
                      },
                      {
                        "point": [
                          180.78,
                          -289.19
                        ],
                        "toTop": true,
                        "allowedToTop": true
                      }
                    ]
                  }
                }
              },
              "dynamic": []
            }
          },
          "nodeID": "66a0e1b8e64b167670872e86"
        },
        "66a0e697e64b167670872ea7": {
          "type": "block",
          "data": {
            "name": "Continue",
            "steps": [
              "66a0e1aee64b167670872e7d"
            ],
            "color": "#56b365"
          },
          "nodeID": "66a0e697e64b167670872ea7",
          "coords": [
            615.6512098361976,
            -732.7759578307564
          ]
        },
        "66a0e6e3e64b167670872ec3": {
          "type": "text",
          "data": {
            "name": "Text",
            "texts": [
              {
                "id": "sw4n13eso",
                "content": [
                  {
                    "children": [
                      {
                        "text": "Expired"
                      }
                    ]
                  }
                ]
              }
            ],
            "canvasVisibility": "preview",
            "portsV2": {
              "byKey": {},
              "builtIn": {
                "next": {
                  "type": "next",
                  "target": null,
                  "id": "66a0e6e3e64b167670872ec4"
                }
              },
              "dynamic": []
            }
          },
          "nodeID": "66a0e6e3e64b167670872ec3"
        },
        "66a0e6e3e64b167670872ec6": {
          "type": "block",
          "data": {
            "name": "Token has expired",
            "color": "#dc8879",
            "steps": [
              "66a0e6e3e64b167670872ec3"
            ]
          },
          "nodeID": "66a0e6e3e64b167670872ec6",
          "coords": [
            613.1512098361975,
            -515.2759578307564
          ]
        },
        "66a0e7a3e64b167670872ed6": {
          "type": "text",
          "data": {
            "name": "Text",
            "texts": [
              {
                "id": "tj5hb3ebs",
                "content": [
                  {
                    "children": [
                      {
                        "text": "Not allowed"
                      }
                    ]
                  }
                ]
              }
            ],
            "canvasVisibility": "preview",
            "portsV2": {
              "byKey": {},
              "builtIn": {
                "next": {
                  "type": "next",
                  "target": null,
                  "id": "66a0e7a3e64b167670872ed7"
                }
              },
              "dynamic": []
            }
          },
          "nodeID": "66a0e7a3e64b167670872ed6"
        },
        "66a0e7a3e64b167670872ed8": {
          "type": "block",
          "data": {
            "name": "Not allowed",
            "steps": [
              "66a0e7a3e64b167670872ed6"
            ],
            "color": "#CB627B"
          },
          "nodeID": "66a0e7a3e64b167670872ed8",
          "coords": [
            614.4012098361976,
            -375.2759578307564
          ]
        },
        "66a0e8ede64b167670872f03": {
          "type": "text",
          "data": {
            "name": "Text",
            "texts": [
              {
                "id": "dn5sj3e3s",
                "content": [
                  {
                    "children": [
                      {
                        "text": "Sorry, you can't use this agent."
                      }
                    ]
                  }
                ]
              }
            ],
            "canvasVisibility": "preview",
            "portsV2": {
              "byKey": {},
              "builtIn": {
                "next": {
                  "type": "next",
                  "target": null,
                  "id": "66a0e8ede64b167670872f04"
                }
              },
              "dynamic": []
            }
          },
          "nodeID": "66a0e8ede64b167670872f03"
        },
        "66a0e8ede64b167670872f05": {
          "type": "block",
          "data": {
            "name": "Error",
            "steps": [
              "66a0e8ede64b167670872f03"
            ],
            "color": "#CB627B"
          },
          "nodeID": "66a0e8ede64b167670872f05",
          "coords": [
            180.77693342423174,
            -289.18615033471497
          ]
        }
      },
      "offsetX": 660.3784532606145,
      "offsetY": 881.3489202677721,
      "modified": 1681419809,
      "creatorID": 3600,
      "variables": [],
      "menuItems": [
        {
          "type": "NODE",
          "sourceID": "start00000000000000000000"
        }
      ],
      "menuNodeIDs": [],
      "intentStepIDs": [],
      "_id": "66a0e19b4422a15a3960409f",
      "diagramID": "64386e21bb106b044ea34b78",
      "versionID": "66a0e19b4422a15a3960409d"
    }
  },
  "flows": [],
  "entities": [],
  "entityVariants": [],
  "intents": [
    {
      "id": "6579c6bf984565862f64b783",
      "name": "Yes",
      "createdByID": 3600,
      "folderID": null,
      "description": "Trigger this intent when the user responds affirmatively or agrees to a question or statement using words like \"yes\", \"yea\", \"yup\", \"yep\", \"ya\", \"ok\", \"okay\", \"affirmative\", \"certainly\", or \"sure\".",
      "automaticReprompt": false,
      "entityOrder": [],
      "automaticRepromptSettings": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "6579c778dd3cca0fe0e0b152",
      "name": "No",
      "createdByID": 3600,
      "folderID": null,
      "description": "Trigger this intent when the user responds negatively or declines something, using words like \"no\", \"nope\", \"nay\", \"nah\", \"not now\", \"no way\", \"no thanks\", \"not\", \"nevermind\", or \"negative\".",
      "automaticReprompt": false,
      "entityOrder": [],
      "automaticRepromptSettings": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "None",
      "name": "None",
      "createdByID": 3600,
      "folderID": null,
      "description": null,
      "automaticReprompt": false,
      "entityOrder": [],
      "automaticRepromptSettings": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    }
  ],
  "utterances": [
    {
      "id": "65d72a6aa845250f3bd1b9af",
      "text": [
        {
          "text": [
            "sure"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b0",
      "text": [
        {
          "text": [
            "certainly"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b1",
      "text": [
        {
          "text": [
            "affirmative"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b2",
      "text": [
        {
          "text": [
            "okay"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b3",
      "text": [
        {
          "text": [
            "ok"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b4",
      "text": [
        {
          "text": [
            "ya"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b5",
      "text": [
        {
          "text": [
            "yep"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b6",
      "text": [
        {
          "text": [
            "yup"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b7",
      "text": [
        {
          "text": [
            "yea"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b8",
      "text": [
        {
          "text": [
            "yes"
          ]
        }
      ],
      "intentID": "6579c6bf984565862f64b783",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9b9",
      "text": [
        {
          "text": [
            "negative"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9ba",
      "text": [
        {
          "text": [
            "nevermind"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9bb",
      "text": [
        {
          "text": [
            "not"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9bc",
      "text": [
        {
          "text": [
            "no thanks"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9bd",
      "text": [
        {
          "text": [
            "no way"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9be",
      "text": [
        {
          "text": [
            "not now"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9bf",
      "text": [
        {
          "text": [
            "nah"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9c0",
      "text": [
        {
          "text": [
            "nay"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9c1",
      "text": [
        {
          "text": [
            "nope"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    },
    {
      "id": "65d72a6aa845250f3bd1b9c2",
      "text": [
        {
          "text": [
            "no"
          ]
        }
      ],
      "intentID": "6579c778dd3cca0fe0e0b152",
      "language": "en-us",
      "createdAt": "2024-07-24T11:12:27.000Z"
    }
  ],
  "requiredEntities": [],
  "folders": [],
  "responses": [],
  "responseVariants": [],
  "responseMessages": [],
  "responseAttachments": [],
  "responseDiscriminators": [],
  "variables": [
    {
      "id": "sessions",
      "name": "sessions",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "number",
      "description": "The number of times a particular user has opened the app.",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "user_id",
      "name": "user_id",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "text",
      "description": "The user's unique ID.",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "timestamp",
      "name": "timestamp",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "number",
      "description": "UNIX timestamp (number of seconds since January 1st, 1970 at UTC).",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "platform",
      "name": "platform",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "text",
      "description": "The platform your agent is running on (e.g. \"voiceflow\").",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "intent_confidence",
      "name": "intent_confidence",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "number",
      "description": "The confidence interval (measured as a value from 0 to 100) for the most recently matched intent.",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "last_response",
      "name": "last_response",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "text",
      "description": "The agent's last response (text/speak) in a string.",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "last_event",
      "name": "last_event",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "any",
      "description": "The object containing the last event that the user client has triggered.",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "last_utterance",
      "name": "last_utterance",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "text",
      "description": "The user's last utterance in a text string.",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "vf_memory",
      "name": "vf_memory",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": true,
      "datatype": "text",
      "description": "Last 10 user inputs and agent responses in a string (e.g. \"agent: How can i help?\"\nuser: What's the weather today?).",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T11:12:27.000Z",
      "updatedByID": 3600
    },
    {
      "id": "66a0e1d44422a15a396040ae",
      "name": "debug",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": false,
      "datatype": "any",
      "description": "",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:13:24.000Z",
      "updatedAt": "2024-07-24T11:13:24.000Z",
      "updatedByID": 3600
    },
    {
      "id": "66a0e7164422a15a396042e2",
      "name": "result",
      "createdByID": 3600,
      "folderID": null,
      "color": "#515A63",
      "isArray": false,
      "isSystem": false,
      "datatype": "any",
      "description": "",
      "defaultValue": null,
      "createdAt": "2024-07-24T11:35:50.000Z",
      "updatedAt": "2024-07-24T11:35:50.000Z",
      "updatedByID": 3600
    }
  ],
  "workflows": [
    {
      "id": "66a0e19ba9ca7f0008c75573",
      "name": "Home",
      "createdByID": 3600,
      "folderID": null,
      "status": null,
      "isStart": true,
      "diagramID": "64386e21bb106b044ea34b78",
      "assigneeID": null,
      "description": null,
      "createdAt": "2024-07-24T11:12:27.000Z",
      "updatedAt": "2024-07-24T14:40:07.000Z",
      "updatedByID": 3600
    }
  ],
  "attachments": [],
  "cardButtons": [],
  "functions": [
    {
      "id": "66a0ea804422a15a3960459d",
      "name": "Check Token",
      "createdByID": 3600,
      "folderID": null,
      "code": "export default async function main(args) {\n    // Extracting input variables\n    const { key1, key2, key3 } = args.inputVars;\n    \n    let token = last_event.payload.validationToken\n\nconst SECRET_KEY = 'your-secret-key-here'; // Same as in Cloudflare Worker\n\n// Array of allowed domains\nconst allowedDomains = ['voiceflow-gallagan.github.io','dash.cloudflare.com', 'google.com'];\n\n// Array of allowed domain patterns\nconst allowedDomainPatterns = [/^.*\\.voiceflow\\.com$/];\n    \n\n// Base64 encoding and decoding functions\nconst Base64 = {\n  _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n  encode: function(e) {\n    var t = \"\";\n    var n, r, i, s, o, u, a;\n    var f = 0;\n    e = Base64._utf8_encode(e);\n    while (f < e.length) {\n      n = e.charCodeAt(f++);\n      r = e.charCodeAt(f++);\n      i = e.charCodeAt(f++);\n      s = n >> 2;\n      o = (n & 3) << 4 | r >> 4;\n      u = (r & 15) << 2 | i >> 6;\n      a = i & 63;\n      if (isNaN(r)) {\n        u = a = 64\n      } else if (isNaN(i)) {\n        a = 64\n      }\n      t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)\n    }\n    return t\n  },\n  decode: function(e) {\n    var t = \"\";\n    var n, r, i;\n    var s, o, u, a;\n    var f = 0;\n    e = e.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n    while (f < e.length) {\n      s = this._keyStr.indexOf(e.charAt(f++));\n      o = this._keyStr.indexOf(e.charAt(f++));\n      u = this._keyStr.indexOf(e.charAt(f++));\n      a = this._keyStr.indexOf(e.charAt(f++));\n      n = s << 2 | o >> 4;\n      r = (o & 15) << 4 | u >> 2;\n      i = (u & 3) << 6 | a;\n      t = t + String.fromCharCode(n);\n      if (u != 64) {\n        t = t + String.fromCharCode(r)\n      }\n      if (a != 64) {\n        t = t + String.fromCharCode(i)\n      }\n    }\n    t = Base64._utf8_decode(t);\n    return t\n  },\n  _utf8_encode: function(e) {\n    e = e.replace(/\\r\\n/g, \"\\n\");\n    var t = \"\";\n    for (var n = 0; n < e.length; n++) {\n      var r = e.charCodeAt(n);\n      if (r < 128) {\n        t += String.fromCharCode(r)\n      } else if (r > 127 && r < 2048) {\n        t += String.fromCharCode(r >> 6 | 192);\n        t += String.fromCharCode(r & 63 | 128)\n      } else {\n        t += String.fromCharCode(r >> 12 | 224);\n        t += String.fromCharCode(r >> 6 & 63 | 128);\n        t += String.fromCharCode(r & 63 | 128)\n      }\n    }\n    return t\n  },\n  _utf8_decode: function(e) {\n    var t = \"\";\n    var n = 0;\n    var r = c1 = c2 = 0;\n    while (n < e.length) {\n      r = e.charCodeAt(n);\n      if (r < 128) {\n        t += String.fromCharCode(r);\n        n++\n      } else if (r > 191 && r < 224) {\n        c2 = e.charCodeAt(n + 1);\n        t += String.fromCharCode((r & 31) << 6 | c2 & 63);\n        n += 2\n      } else {\n        c2 = e.charCodeAt(n + 1);\n        c3 = e.charCodeAt(n + 2);\n        t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n        n += 3\n      }\n    }\n    return t\n  }\n}\n\n\nfunction validateToken(token) {\n  try {\n    const [payloadBase64, signatureBase64] = token.split('.');\n    const payload = JSON.parse(Base64.decode(payloadBase64));\n    debug = JSON.stringify(payload)\n    \n    // Check expiration\n    if (payload.exp < Date.now()) {\n      return 'Expired';\n    }\n    \n    function isAllowedDomain(hostname) {\n      // Check exact matches\n      if (allowedDomains.includes(hostname)) {\n        return true;\n      }\n      // Check pattern matches\n      return allowedDomainPatterns.some(pattern => pattern.test(hostname));\n    }\n    \n    // Check hostname\n    if (!isAllowedDomain(payload.hostname)) {\n      return 'Not allowed'\n    }\n    \n    // Verify signature\n    const verifySignature = async () => {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(JSON.stringify(payload) + SECRET_KEY);\n      const hash = await crypto.subtle.digest('SHA-256', data);\n      const calculatedSignature = btoa(String.fromCharCode.apply(null, new Uint8Array(hash)));\n      if(!calculatedSignature === signatureBase64) {\n        return 'Error'\n      }\n    };\n    return verifySignature();\n  } catch (error) {\n    console.error('Token validation error:', error);\n    return 'Error';\n  }\n}\n\nreturn validateToken(token)\n\n    \n    // Echo back the first key value along with a debug message\n    return {\n        next: { path: 'success' }, // Directing the flow to continue on the 'success' path\n        trace: [\n            {\n                type: \"debug\",\n                payload: { message: debugMessage }\n            },\n            {\n                type: \"text\",\n                payload: { message: `Echo: ${key1}` } // Responding with the value of key1\n            }\n        ]\n    };\n    \n    // Note: In a production environment, consider removing or limiting debug traces\n    // to avoid exposing sensitive information or cluttering the user experience.\n}",
      "image": null,
      "description": "",
      "pathOrder": [
        "66a0ea804422a15a3960459e"
      ],
      "createdAt": "2024-07-24T11:50:24.000Z",
      "updatedAt": "2024-07-24T11:51:04.000Z",
      "updatedByID": 3600
    }
  ],
  "functionPaths": [
    {
      "id": "66a0ea804422a15a3960459e",
      "name": "success",
      "label": "",
      "functionID": "66a0ea804422a15a3960459d",
      "createdAt": "2024-07-24T11:50:24.214Z"
    }
  ],
  "functionVariables": [
    {
      "id": "66a0ea804422a15a396045a1",
      "name": "key3",
      "type": "input",
      "functionID": "66a0ea804422a15a3960459d",
      "description": "",
      "createdAt": "2024-07-24T11:50:24.214Z"
    },
    {
      "id": "66a0ea804422a15a3960459f",
      "name": "key2",
      "type": "input",
      "functionID": "66a0ea804422a15a3960459d",
      "description": "",
      "createdAt": "2024-07-24T11:50:24.215Z"
    },
    {
      "id": "66a0ea804422a15a396045a0",
      "name": "key1",
      "type": "input",
      "functionID": "66a0ea804422a15a3960459d",
      "description": "",
      "createdAt": "2024-07-24T11:50:24.216Z"
    }
  ],
  "project": {
    "type": "chat",
    "name": "Domain Checker",
    "image": "",
    "teamID": "peEqrGWwkD",
    "members": [],
    "privacy": "private",
    "platform": "webchat",
    "_version": 1.2,
    "linkType": "STRAIGHT",
    "creatorID": 3600,
    "updatedBy": 3600,
    "apiPrivacy": "public",
    "platformData": {
      "invocationName": "template project general"
    },
    "customThemes": [],
    "aiAssistSettings": {
      "aiPlayground": true
    },
    "_id": "66a0e19b4422a15a3960409c",
    "updatedAt": "2024-07-24T11:33:45.283Z",
    "knowledgeBase": {
      "settings": {
        "summarization": {
          "model": "gpt-3.5-turbo",
          "system": "You are an FAQ AI chat assistant. Information will be provided to help answer the user's questions. Always summarize your response to be as brief as possible and be extremely concise. Your responses should be fewer than a couple of sentences.",
          "temperature": 0.1,
          "mode": "prompt",
          "prompt": ""
        },
        "chunkStrategy": {
          "type": "recursive_text_splitter",
          "size": 1200,
          "overlap": 200
        },
        "search": {
          "limit": 3,
          "metric": "IP"
        },
        "embeddingModel": {
          "model": "text-embedding-3-large",
          "size": 1024
        }
      },
      "documents": {}
    },
    "devVersion": "66a0e19b4422a15a3960409d"
  },
  "_version": "1.2",
  "variableStates": []
}